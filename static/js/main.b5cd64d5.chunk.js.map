{"version":3,"sources":["reducers.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","actions.js","constants.js","registerServiceWorker.js","index.js"],"names":["initialStateSearch","searchField","initialStateRobots","robots","isPending","error","Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","info","setState","Component","Header","nextProps","nextState","React","App","onRequestRobots","_this$props","onSearchChange","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b5cd64d5.chunk.js","sourcesContent":["import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch(action.type){\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, {searchField: action.payload});\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initialStateRobots = {\n\trobots: [],\n\tisPending: false,\n\terror: ''\n}\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type){\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, {isPending: true});\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false});\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false});\n\t\tdefault: \n\t\t\treturn state;\n\t}\n}","import React from 'react';\n\nconst Card = ( { name, email , id}) => {\n\treturn (\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} /> \n\t\t\t<div>\n\t\t\t\t<h2>{name}</h2>\n\t\t\t\t<p>{email}</p>\n\t\t\t</div>\n\t\t</div> \n\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card'\n\nconst CardList = ({ robots }) => {\n\t\n\treturn (\n\t\t<div>\n\t\t{\n\t\t\trobots.map((user, i) =>{\t\t\n\t\t\t\treturn (\n\t\t\t\t\t<Card \n\t\t\t\t\t\tkey={robots[i].id} \n\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})\n\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\treturn(\n\t\t<div className=' pa2'>\n\t\t\t<input \n\t\t\t\tclassName= 'pa3 ba b--green bg-lightest-blue'\n\t\t\t\ttype='search' \n\t\t\t\tplaceholder='search Robots'\n\t\t\t\tonChange = {searchChange}\n\t\t\t/>\n\t\t</div>\n\t\t);\n}\n\nexport default SearchBox; ","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{ overflowY : 'scroll', border: '1px solid black', height: '500px'}}>\n\t\t\t{ props.children }\n\t\t</div>\n\t\t);\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n\tconstructor(){\n\t\tsuper();\n\t\tthis.state = {\n\t\t\thasError: false\n\t\t}\n\t}\n\n\tcomponentDidCatch(error, info){\n\t\tthis.setState({hasError: true})\n\t}\n\n\trender(){\n\t\tif(this.state.hasError){\n\t\t\treturn <h1>Ooooops. That is not good </h1>\n\t\t}\n\n\t\treturn this.props.children;\n\t}\n}\n\nexport default ErrorBoundry;","import React from 'react';\n\nclass Header extends React.Component {\n\tshouldComponentUpdate(nextProps, nextState){\n\t\treturn false; \n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<h1 className=\"f1\">RoboFriends</h1>\n\t\t);\n\t}\n}\n\nexport default Header;","import React, { Component } from 'react';\n\n//Components\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport Header from '../components/Header'\nimport './App.css';\n\n//Actions and Store\nimport { connect } from 'react-redux';\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tsearchField: state.searchRobots.searchField,\n\t\trobots: state.requestRobots.robots,\n\t\tisPending: state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => dispatch(requestRobots())\n\t}\n}\n\nclass App extends Component {\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\t\t\n\t}\n\n\trender(){\t\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\t\n\t\treturn isPending ?\n\t\t\t<h1>Loading</h1>  :\n\t\t    (\n\t\t\t\t<div className='tc'>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<SearchBox searchChange={onSearchChange} />\n\t\t\t\t\t<Scroll>\n\t\t\t\t\t<ErrorBoundry>\n\t\t\t\t\t\t<CardList robots = {filteredRobots} />\n\t\t\t\t\t</ErrorBoundry>\n\t\t\t\t\t</Scroll>\n\t\t\t\t</div>\n\t\t\t);\n\t}\t\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n","import {\n\tCHANGE_SEARCH_FIELD,\n\tREQUEST_ROBOTS_PENDING,\n\tREQUEST_ROBOTS_SUCCESS,\n\tREQUEST_ROBOTS_FAILED\n} from './constants.js'\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n\t\t.catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'; ","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers} from 'redux';\nimport thunkMiddleware from 'redux-thunk'\nimport { createLogger } from 'redux-logger';\nimport { searchRobots, requestRobots } from './reducers';\nimport App from './containers/App'\nimport registerServiceWorker from './registerServiceWorker';\n\nimport 'tachyons';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\nconst store = \n\tcreateStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n\t\t\t\t<Provider store={store}>\n\t\t\t\t\t<App />\n\t\t\t\t</Provider> , document.getElementById('root'));\nregisterServiceWorker();\n\n"],"sourceRoot":""}